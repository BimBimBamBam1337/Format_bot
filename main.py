import os
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from amocrm import AmoCRMClient
from amocrm.models import Lead, BranchIsNotOnline
from aiogram import Bot
from dotenv import load_dotenv
from loguru import logger
from sys import stdout
from google_sheets import GoogleSheets
from datetime import datetime


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
current_directory_name = os.path.basename(os.getcwd())

os.makedirs(".", exist_ok=True)  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ logs, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

log_file_path = os.path.join(
    "logs", f"{current_directory_name}_{{time:YYYY-MM-DD}}.log"
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
logger.add(
    log_file_path,  # –§–∞–π–ª –ª–æ–≥–∞ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ –¥–∞—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    rotation="00:00",  # –†–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å
    retention="7 days",  # –•—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}",  # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ
    level="INFO",  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    compression="zip",  # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
)

app = FastAPI()
bot = Bot(os.getenv("telegram_token"))
GROUP_CHAT_ID =int(os.getenv("group"))
google = GoogleSheets()
amo_client = AmoCRMClient(
    base_url="https://teslakz.amocrm.ru",
    access_token=os.getenv("access_token"),
    client_id=os.getenv("client_id"),
    client_secret=os.getenv("client_secret"),
    permanent_access_token=True,
)


@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    amo_client.start_session()  # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    bot_info = await bot.get_me()
    logger.info(f"–ë–æ—Ç[{bot_info.id}] @{bot_info.username}")


@app.on_event("shutdown")
async def shutdown_event():
    """–°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await amo_client.close_session()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏


async def send_to_telegram(lead: Lead):
    await bot.send_message(
        GROUP_CHAT_ID,
        f"<u>–ü—Ä–∏–º–∏—Ç–µ –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞</u>.üòä\n"
        f"–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: <b>{lead.payment.date}</b>\n\n"
        f"ü§ì–£—á–µ–Ω–∏–∫: <b>{lead.learner.last_name} {lead.learner.first_name}</b>\n"
        f"‚úîÔ∏è–ö–ª–∞—Å—Å –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ: <b>{lead.learner.grade} {lead.learner.departament}</b>\n"
        f"‚è∞–í—Ä–µ–º—è: <b>{lead.learning_time}</b>\n"
        f"üë©‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å: <b>{lead.parent.name}</b>\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <b>{lead.parent.phone}</b>\n"
        f"üè† –§–∏–ª–∏–∞–ª: <b>{lead.branch}</b>\n\n"
        f"üî∑ –°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è: <b>{'' if lead.learning_duration == '' else lead.learning_duration + ' –º–µ—Å.'}</b>\n\n"
        f"üü¢ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è: <b>{lead.start_date}</b>\n"
        f"üî¥ –î–∞—Ç–∞ –∫–æ–Ω—Ü–∞ –æ–±—É—á–µ–Ω–∏—è: <b>{lead.end_date}</b>\n\n"
        f"üéØ–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è: <b>{lead.learner.learning_direction}</b>\n"
        f"üìö–ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: <b>{lead.learner.profile_subjects}</b>\n"
        f"‚ÑπÔ∏è–ù–æ–≤—ã–π –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ: <b>{lead.status}</b>\n"
        f"üì®–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –û–ü: <b>{lead.manager.comment}</b>\n\n"
        f"üòé–ú–µ–Ω–µ–¥–∂–µ—Ä: <b>{lead.manager.name}</b>",
        parse_mode="HTML",
    )


def send_to_google(lead: Lead):
    data_insert = [
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        lead.payment.date,
        lead.manager.name,
        "",
        lead.learner.last_name + ' ' +  lead.learner.first_name,
        lead.learner.learning_direction,
        lead.learner.grade,
        lead.learner.departament,
        lead.learning_time,
        lead.branch,
        lead.learner.profile_subjects,
        lead.payment.amount,
        lead.payment.credit,
        lead.payment.method,
        lead.base_course,
        lead.intensive_cource,
        lead.summer_camp,
        lead.status,
        "",
        lead.start_date,
        lead.end_date,
        lead.parent.name,
        "",
        lead.parent.phone,
        lead.manager.comment,
        lead.parent.email,
    ]
    google.insert_row(data_insert, google.get_filled_row_count() + 1)


@app.post("/webhook")
async def webhook(request: Request):
    form_data = await request.form()
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
    data = {key: value for key, value in form_data.items()}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö leads[status] –∏ account
    leads_status = {
        "id": data.get("leads[status][0][id]"),
        # "status_id": data.get("leads[status][0][status_id]"),
        # "pipeline_id": data.get("leads[status][0][pipeline_id]"),
        # "old_status_id": data.get("leads[status][0][old_status_id]"),
        # "old_pipeline_id": data.get("leads[status][0][old_pipeline_id]"),
    }

    # account_info = {
    #     "id": data.get("account[id]"),
    #     "subdomain": data.get("account[subdomain]"),
    # }

    logger.info(f"–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Å–¥–µ–ª–∫–∞ #{leads_status['id']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    try:
        lead = Lead.from_json(await amo_client.get_lead(leads_status["id"]))
        if lead.manager.id:
            lead.manager.set_name(await amo_client.get_user(lead.manager.id))
        if lead.parent.id:
            lead.parent.set_email(await amo_client.get_contact(lead.parent.id))
        await send_to_telegram(lead)
        send_to_google(lead)
    except BranchIsNotOnline:
        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8010)
